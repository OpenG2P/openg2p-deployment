{
	"info": {
		"_postman_id": "b3954e01-9f87-4696-9f96-6c6f44b32b82",
		"name": "MojaloopQuotes_transfers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mojaloop Quotes and Transfers",
			"item": [
				{
					"name": "New Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var navigator = {}; //fake a navigator object for the lib",
									"var window = {}; //fake a window object for the lib",
									"eval(pm.environment.get('jrsassign'));",
									"",
									"",
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"",
									"// pm.variables.set('quoteDate', (new Date()).toUTCString());",
									"// pm.variables.set('payerName', 'PayerFirst PayerLast');",
									"// pm.variables.set('payerMSISDN', '918381008987');",
									"",
									"// pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
									"// pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
									"// pm.variables.set('expectedPayeeDOB', '2010-10-10');",
									"",
									"// var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
									"// var sHeader = JSON.stringify(oHeader);",
									"// console.log(`sHeader: ${sHeader}`)",
									"",
									"var objPayload = {",
									"  \"quoteId\": pm.environment.get('quoteId'),",
									"  \"transactionId\": pm.environment.get('transactionId'),",
									"  \"payer\": {",
									"    \"partyIdInfo\": {",
									"      \"partyIdType\": \"IBAN\",",
									"      \"partyIdentifier\": \"IC11in02tn040000000001\",",
									"      \"fspId\": \"dfsp1\"",
									"    },",
									"    \"personalInfo\": {",
									"      \"complexName\": {",
									"        \"firstName\": \"Mahender\",",
									"        \"middleName\": \"J\",",
									"        \"lastName\": \"Reddy\"",
									"      },",
									"      \"dateOfBirth\": \"1984-01-01\"",
									"    }",
									"  },",
									"  \"payee\": {",
									"    \"partyIdInfo\": {",
									"      \"partyIdType\": \"IBAN\",",
									"      \"partyIdentifier\": \"IC11in02tn030000000789\",",
									"      \"fspId\": \"dfsp2\"",
									"    }",
									"  },",
									"  \"amountType\": \"SEND\",",
									"  \"amount\": {",
									"    \"amount\": \"100\",",
									"    \"currency\": \"USD\"",
									"  },",
									"  \"transactionType\": {",
									"    \"scenario\": \"TRANSFER\",",
									"    \"initiator\": \"PAYER\",",
									"    \"initiatorType\": \"CONSUMER\"",
									"  },",
									"  \"note\": \"hej\"",
									"}",
									"",
									"var sPayload = JSON.stringify(objPayload)",
									"console.log(`sPayload: ${sPayload}`)",
									"pm.variables.set(\"quoteRequest\", sPayload);",
									"// var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
									"// console.log(`token: ${token}`)",
									"",
									"// // var encodedHeaders = btoa(sHeader)",
									"",
									"// // var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
									"// // var token = JSON.stringify(ofspiopSignature)",
									"",
									"// const [ protectedHeaderBase64, , signature ] = token.split('.');",
									"",
									"// const signatureObject = {",
									"//     signature: signature.replace('\"', ''),",
									"//     protectedHeader: protectedHeaderBase64.replace('\"', '')",
									"// };",
									"",
									"// console.log(JSON.stringify(signatureObject))",
									"",
									"// pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "dfsp1",
								"type": "text"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "dfsp2",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{quoteRequest}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// //Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYEE_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"            //   //Check the Headers",
									"            //   var headers = response.json().headers;",
									"              ",
									"            //     pm.test(`${pm.environment.get('SIMPAYEE_NAME')} fspiop-source is ${pm.environment.get('SIMPAYER_NAME')}`, function () {",
									"            //         pm.expect(headers['fspiop-source']).to.eql(pm.environment.get('SIMPAYER_NAME'));",
									"            //     });",
									"                ",
									"            //     pm.test(`${pm.environment.get('SIMPAYEE_NAME')} fspiop-destination is ${pm.environment.get('SIMPAYEE_NAME')}`, function () {",
									"            //         pm.expect(headers['fspiop-destination']).to.eql(pm.environment.get('SIMPAYEE_NAME'));",
									"            //     });",
									"                ",
									"            //      pm.test(`${pm.environment.get('SIMPAYEE_NAME')} content-type should be ${pm.environment.get('contentTypeTransfersRequest')}`, function () {",
									"            //     pm.expect(headers['content-type']).to.eql(pm.environment.get('contentTypeTransfersRequest'));",
									"            // });",
									"                ",
									"            //     pm.test(`${pm.environment.get('SIMPAYEE_NAME')} accept is same as sent in the request`, function () {",
									"            //         pm.expect(headers['accept']).to.match(/application\\/vnd\\.interoperability\\.transfers\\+json;version=1(\\.\\d)?/);",
									"            //     });",
									"                ",
									"            //     pm.test(`${pm.environment.get('SIMPAYEE_NAME')} fspiop-signature is same as sent in the request`, function () {",
									"            //         pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
									"            //     });",
									"                ",
									"            //     pm.test(`${pm.environment.get('SIMPAYEE_NAME')} fspiop-http-method is POST`, function () {",
									"            //         pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"            //     });",
									"                ",
									"            //     pm.test(`${pm.environment.get('SIMPAYEE_NAME')} fspiop-uri is /transfers`, function () {",
									"            //         pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"            //     });",
									"                ",
									"                ",
									"                //Check the data",
									"                var jsonData = response.json().data;",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same transferId as request`, function () {",
									"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same payerfspId as request`, function () {",
									"                  pm.expect(jsonData.payerFsp).to.eql(\"dfsp1\");",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same ${pm.environment.get('SIMPAYEE_NAME')}Id as request`, function () {",
									"                  pm.expect(\"dfsp2\");",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same amount as request`, function () {",
									"                  pm.expect(jsonData.amount.amount).to.eql('100');",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same currency as request`, function () {",
									"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same expiration as request`, function () {",
									"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same ilpPacket as request`, function () {",
									"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                });",
									"                pm.test(`${pm.environment.get('SIMPAYEE_NAME')} data should have the same condition as request`, function () {",
									"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response on payee side');",
									"              });",
									"              // postman.setNextRequest(null)",
									"          }",
									"  });",
									"}, pm.environment.get(\"SET_TIMEOUT_TRANSFERS\"))",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYER_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            // //Checking headers",
									"            // var headers = response.json().headers;",
									"            // pm.test(`${pm.environment.get('SIMPAYER_NAME')} fspiop-source is ${pm.environment.get('SIMPAYEE_NAME')}`, function () {",
									"            //     pm.expect(headers['fspiop-source']).to.eql(pm.environment.get('SIMPAYEE_NAME'));",
									"            // });",
									"            ",
									"            // pm.test(`${pm.environment.get('SIMPAYER_NAME')} fspiop-destination is ${pm.environment.get('SIMPAYER_NAME')}`, function () {",
									"            //     pm.expect(headers['fspiop-destination']).to.eql(pm.environment.get('SIMPAYER_NAME'));",
									"            // });",
									"            ",
									"            // pm.test(`${pm.environment.get('SIMPAYER_NAME')} content-type should be ${pm.environment.get('contentTypeTransfers')}`, function () {",
									"            //     pm.expect(headers['content-type']).to.eql(pm.environment.get('contentTypeTransfers'));",
									"            // });",
									"            ",
									"            // pm.test(`${pm.environment.get('SIMPAYER_NAME')} accept is empty`, function () {",
									"            //     pm.expect(headers['accept']).to.eql(undefined);",
									"            // });",
									"            ",
									"            ",
									"            // pm.test(`${pm.environment.get('SIMPAYER_NAME')} fspiop-uri includes /transfers/{{transfer_ID}}`, function () {",
									"            //     pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
									"            // });",
									"            ",
									"            // pm.test(`${pm.environment.get('SIMPAYER_NAME')} fspiop-http-method is PUT`, function () {",
									"            //     pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            // });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"               pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response on payer side');",
									"              });",
									"              // postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, pm.environment.get(\"SET_TIMEOUT_TRANSFERS\"))",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"SIMPAYEE_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"       pm.test(`${pm.environment.get('SIMPAYEE_NAME')} does not receive additional final notification`, function () {",
									"            pm.expect(response.text()).to.eql('');",
									"        });",
									"       ",
									"      ",
									"    });",
									"}, pm.environment.get(\"SET_TIMEOUT_TRANSFERS\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var navigator = {}; //fake a navigator object for the lib",
									"var window = {}; //fake a window object for the lib",
									"eval(pm.environment.get('jrsassign'));",
									"",
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
									"",
									"",
									"pm.variables.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
									"",
									"// var oHeader = {alg: \"RS256\", \"FSPIOP-Source\": pm.environment.get('SIMPAYER_NAME'),\"FSPIOP-Destination\": pm.environment.get('SIMPAYEE_NAME'), \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
									"// var sHeader = JSON.stringify(oHeader);",
									"// console.log(`sHeader: ${sHeader}`)",
									"",
									"var objPayload = {",
									"  \"transferId\": pm.environment.get('transfer_ID'),",
									"  \"payerFsp\": \"dfsp1\",",
									"  \"payeeFsp\": \"dfsp2\",",
									"  \"amount\": {",
									"    \"amount\": \"100\",",
									"    \"currency\": \"USD\"",
									"  },",
									"  \"expiration\": pm.environment.get('transferExpiration'),",
									"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
									"  \"condition\": pm.environment.get('condition')",
									"}",
									"var sPayload = JSON.stringify(objPayload)",
									"console.log(`sPayload: ${sPayload}`)",
									"pm.variables.set(\"transferRequest\", sPayload);",
									"// var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('SIMPAYER_JWS_KEY'));",
									"// //console.log(`token: ${token}`)",
									"",
									"// // var encodedHeaders = btoa(sHeader)",
									"",
									"// // var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
									"// // var token = JSON.stringify(ofspiopSignature)",
									"",
									"// const [ protectedHeaderBase64, , signature ] = token.split('.');",
									"",
									"// const signatureObject = {",
									"//     signature: signature.replace('\"', ''),",
									"//     protectedHeader: protectedHeaderBase64.replace('\"', '')",
									"// };",
									"",
									"// console.log(JSON.stringify(signatureObject))",
									"",
									"// pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{SIMPAYER_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "{{contentTypeTransfersRequest}}"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "dfsp1"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "dfsp2"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{transferRequest}}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "New DFSP Transfer E2E",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"homeTransactionId\": \"abc123\",\n    \"from\": {\n      \"idType\": \"IBAN\",\n      \"idValue\": \"IC11in02tn030000028765\"\n    },\n    \"to\": {\n      \"idType\": \"IBAN\",\n      \"idValue\": \"IC11in02tn040000000695\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"USD\",\n    \"amount\": \"26\",\n    \"transactionType\": \"TRANSFER\",\n    \"note\": \"test transfer note1\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://ml-dfsp2-dev.openg2p.mosip.net/api/outbound/transfers",
							"protocol": "https",
							"host": [
								"ml-dfsp2-dev",
								"openg2p",
								"mosip",
								"net"
							],
							"path": [
								"api",
								"outbound",
								"transfers"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}